---
import Layout from '@layouts/Default.astro';
import { getCollection, getEntry } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { slug } = Astro.params;
const post = await getEntry('blog', slug as string);

if (!post) {
  return Astro.redirect('/admin');
}

const { data, body } = post;
---

<Layout
  title={`Editar: ${data.title} - Admin`}
  description="Editar post do blog"
>
  <main class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
      <div class="flex items-center mb-8">
        <a href="/admin" class="text-primary hover:text-primary/80 mr-4">← Voltar ao Admin</a>
        <h1 class="text-4xl font-bold text-deep">Editar Post</h1>
      </div>

      <div class="brutal-card bg-yellow-50 p-4 rounded-lg mb-6 border-2 border-yellow-300">
        <p class="text-yellow-800">
          <strong>Nota:</strong> As edições feitas aqui geram um arquivo para download.
          Você precisa substituir o arquivo original em <code>src/content/blog/{post.slug}.md</code>
        </p>
      </div>

      <form id="edit-post-form" class="brutal-card bg-white p-8 rounded-lg">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <!-- Título -->
          <div class="md:col-span-2">
            <label for="title" class="block text-sm font-medium text-gray-700 mb-2">Título *</label>
            <input
              type="text"
              id="title"
              name="title"
              required
              value={data.title}
              class="w-full p-3 border-2 border-black rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
            />
          </div>

          <!-- Descrição -->
          <div class="md:col-span-2">
            <label for="description" class="block text-sm font-medium text-gray-700 mb-2">Descrição *</label>
            <textarea
              id="description"
              name="description"
              required
              rows="3"
              class="w-full p-3 border-2 border-black rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
            >{data.description}</textarea>
          </div>

          <!-- Autor -->
          <div>
            <label for="author" class="block text-sm font-medium text-gray-700 mb-2">Autor *</label>
            <input
              type="text"
              id="author"
              name="author"
              required
              value={data.author}
              class="w-full p-3 border-2 border-black rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
            />
          </div>

          <!-- Categoria -->
          <div>
            <label for="category" class="block text-sm font-medium text-gray-700 mb-2">Categoria</label>
            <select
              id="category"
              name="category"
              class="w-full p-3 border-2 border-black rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
            >
              <option value="">Selecione uma categoria</option>
              <option value="cognitive-psychology" {data.category === 'cognitive-psychology' ? 'selected' : ''}>Psicologia Cognitiva</option>
              <option value="behavioral-psychology" {data.category === 'behavioral-psychology' ? 'selected' : ''}>Psicologia Comportamental</option>
              <option value="clinical-psychology" {data.category === 'clinical-psychology' ? 'selected' : ''}>Psicologia Clínica</option>
              <option value="developmental-psychology" {data.category === 'developmental-psychology' ? 'selected' : ''}>Psicologia do Desenvolvimento</option>
              <option value="social-psychology" {data.category === 'social-psychology' ? 'selected' : ''}>Psicologia Social</option>
              <option value="neuropsychology" {data.category === 'neuropsychology' ? 'selected' : ''}>Neuropsicologia</option>
              <option value="positive-psychology" {data.category === 'positive-psychology' ? 'selected' : ''}>Psicologia Positiva</option>
              <option value="therapy-techniques" {data.category === 'therapy-techniques' ? 'selected' : ''}>Técnicas Terapêuticas</option>
              <option value="mental-health" {data.category === 'mental-health' ? 'selected' : ''}>Saúde Mental</option>
              <option value="research-insights" {data.category === 'research-insights' ? 'selected' : ''}>Insights de Pesquisa</option>
              <option value="case-studies" {data.category === 'case-studies' ? 'selected' : ''}>Estudos de Caso</option>
              <option value="wellness-tips" {data.category === 'wellness-tips' ? 'selected' : ''}>Dicas de Bem-estar</option>
            </select>
          </div>

          <!-- Tags -->
          <div>
            <label for="tags" class="block text-sm font-medium text-gray-700 mb-2">Tags</label>
            <input
              type="text"
              id="tags"
              name="tags"
              value={data.tags?.join(', ') || ''}
              class="w-full p-3 border-2 border-black rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
              placeholder="tag1, tag2, tag3"
            />
            <p class="text-sm text-gray-500 mt-1">Separe as tags com vírgulas</p>
          </div>

          <!-- Dificuldade -->
          <div>
            <label for="difficulty" class="block text-sm font-medium text-gray-700 mb-2">Dificuldade</label>
            <select
              id="difficulty"
              name="difficulty"
              class="w-full p-3 border-2 border-black rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
            >
              <option value="">Selecione a dificuldade</option>
              <option value="beginner" {data.difficulty === 'beginner' ? 'selected' : ''}>Iniciante</option>
              <option value="intermediate" {data.difficulty === 'intermediate' ? 'selected' : ''}>Intermediário</option>
              <option value="advanced" {data.difficulty === 'advanced' ? 'selected' : ''}>Avançado</option>
            </select>
          </div>

          <!-- Público-alvo -->
          <div>
            <label for="targetAudience" class="block text-sm font-medium text-gray-700 mb-2">Público-alvo</label>
            <select
              id="targetAudience"
              name="targetAudience"
              class="w-full p-3 border-2 border-black rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
            >
              <option value="">Selecione o público</option>
              <option value="general-public" {data.targetAudience === 'general-public' ? 'selected' : ''}>Público Geral</option>
              <option value="students" {data.targetAudience === 'students' ? 'selected' : ''}>Estudantes</option>
              <option value="professionals" {data.targetAudience === 'professionals' ? 'selected' : ''}>Profissionais</option>
              <option value="researchers" {data.targetAudience === 'researchers' ? 'selected' : ''}>Pesquisadores</option>
              <option value="clinicians" {data.targetAudience === 'clinicians' ? 'selected' : ''}>Clínicos</option>
            </select>
          </div>

          <!-- Tempo de Leitura -->
          <div>
            <label for="readingTime" class="block text-sm font-medium text-gray-700 mb-2">Tempo de Leitura (min)</label>
            <input
              type="number"
              id="readingTime"
              name="readingTime"
              min="1"
              value={data.readingTime || ''}
              class="w-full p-3 border-2 border-black rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
            />
          </div>

          <!-- Checkboxes -->
          <div class="md:col-span-2 space-y-4">
            <div class="flex items-center">
              <input
                type="checkbox"
                id="draft"
                name="draft"
                {data.draft ? 'checked' : ''}
                class="h-4 w-4 text-primary focus:ring-primary border-2 border-black rounded"
              />
              <label for="draft" class="ml-2 text-sm text-gray-700">Salvar como rascunho</label>
            </div>

            <div class="flex items-center">
              <input
                type="checkbox"
                id="featured"
                name="featured"
                {data.featured ? 'checked' : ''}
                class="h-4 w-4 text-primary focus:ring-primary border-2 border-black rounded"
              />
              <label for="featured" class="ml-2 text-sm text-gray-700">Post em destaque</label>
            </div>
          </div>
        </div>

        <!-- Conteúdo -->
        <div class="mb-6">
          <label for="content" class="block text-sm font-medium text-gray-700 mb-2">Conteúdo do Post *</label>
          <textarea
            id="content"
            name="content"
            required
            rows="20"
            class="w-full p-3 border-2 border-black rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent font-mono text-sm"
          >{body}</textarea>
          <p class="text-sm text-gray-500 mt-1">Use Markdown para formatação</p>
        </div>

        <!-- Botões -->
        <div class="flex space-x-4">
          <button
            type="submit"
            class="brutal-button bg-primary text-white px-8 py-3 rounded-lg hover:bg-primary/90 transition-colors"
          >
            Salvar Alterações
          </button>
          <a
            href="/admin"
            class="brutal-button bg-gray-500 text-white px-8 py-3 rounded-lg hover:bg-gray-600 transition-colors"
          >
            Cancelar
          </a>
        </div>
      </form>
    </div>
  </main>

  <script define:vars={{ originalSlug: post.slug, originalPubDate: data.pubDate.toISOString() }}>
    document.getElementById('edit-post-form')?.addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData.entries());

      // Processar tags
      const tags = data.tags ? data.tags.split(',').map(tag => tag.trim()).filter(Boolean) : [];

      // Manter data de publicação original e adicionar data de atualização
      const now = new Date();
      const updatedDate = now.toISOString();

      // Montar frontmatter
      const frontmatter = [
        '---',
        `title: "${data.title}"`,
        `description: "${data.description}"`,
        `pubDate: ${originalPubDate}`,
        `updatedDate: ${updatedDate}`,
        `author: "${data.author}"`,
        data.category ? `category: "${data.category}"` : '',
        `tags: [${tags.map(tag => `"${tag}"`).join(', ')}]`,
        data.readingTime ? `readingTime: ${data.readingTime}` : '',
        data.difficulty ? `difficulty: "${data.difficulty}"` : '',
        data.targetAudience ? `targetAudience: "${data.targetAudience}"` : '',
        `draft: ${data.draft ? 'true' : 'false'}`,
        `featured: ${data.featured ? 'true' : 'false'}`,
        '---',
        '',
        data.content
      ].filter(Boolean).join('\n');

      // Usar slug original
      const filename = `${originalSlug}.md`;

      // Baixar arquivo
      const blob = new Blob([frontmatter], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      a.click();
      URL.revokeObjectURL(url);

      alert(`Post editado! Substitua o arquivo: src/content/blog/${filename}`);
    });
  </script>
</Layout>

<style>
  .brutal-card {
    box-shadow: 4px 4px 0px 0px rgba(0, 0, 0, 1);
    border: 2px solid #000;
  }

  .brutal-button {
    box-shadow: 3px 3px 0px 0px rgba(0, 0, 0, 1);
    border: 2px solid #000;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    text-decoration: none;
    display: inline-block;
    text-align: center;
  }

  .brutal-button:hover {
    transform: translate(1px, 1px);
    box-shadow: 2px 2px 0px 0px rgba(0, 0, 0, 1);
  }
</style>