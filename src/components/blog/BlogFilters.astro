---
import type { BlogPost } from '@lib/posts'

interface Props {
  posts: BlogPost[];
  currentCategory?: string;
  currentTags?: string[];
}

const {posts, currentCategory, currentTags = []} = Astro.props;

const categoryMap = new Map<string, string>()
posts.forEach((post) => {
  const category = post.data.category
  if (category && !categoryMap.has(category)) {
    categoryMap.set(category, category.charAt(0).toUpperCase() + category.slice(1))
  }
})

const categories = Array.from(categoryMap.entries()).sort((a, b) =>
  a[1].localeCompare(b[1], 'pt-BR', {sensitivity: 'base'})
)

const allTags = Array.from(
  new Set(
    posts.flatMap((post) => post.data.tags ?? [])
  )
).sort((a, b) => a.localeCompare(b, 'pt-BR', {sensitivity: 'base'}))

const popularTags = allTags.slice(0, 15)
---

<div class="bg-white border-4 border-black p-6 mb-8">
  <h3 class="text-2xl font-bold mb-4 heading-font">Filtrar Artigos</h3>

  <div class="mb-6">
    <h4 class="text-lg font-bold mb-2">Categorias</h4>
    <div class="flex flex-wrap gap-2">
      <a
        href="/blog"
        class={`px-3 py-1 border-2 border-black transition-colors ${
          !currentCategory
            ? 'bg-black text-white'
            : 'bg-white text-black hover:bg-black hover:text-white'
        }`}
      >
        Todas
      </a>
      {categories.map(([slug, label]) => (
        <a
          href={`/blog/category/${slug}`}
          class={`px-3 py-1 border-2 border-black transition-colors ${
            currentCategory === slug
              ? 'bg-black text-white'
              : 'bg-white text-black hover:bg-black hover:text-white'
          }`}
        >
          {label}
        </a>
      ))}
    </div>
  </div>

  <div class="mb-6">
    <h4 class="text-lg font-bold mb-2">Tags Populares</h4>
    <div class="flex flex-wrap gap-2">
      {popularTags.map((tag) => (
        <a
          href={`/blog/tags/${tag.toLowerCase().replace(/\s+/g, '-')}`}
          class={`px-3 py-1 border-2 border-black text-sm transition-colors ${
            currentTags.includes(tag)
              ? 'bg-black text-white'
              : 'bg-white text-black hover:bg-black hover:text-white'
          }`}
        >
          #{tag}
        </a>
      ))}
    </div>
  </div>

  <div class="mb-4">
    <h4 class="text-lg font-bold mb-2">Nível</h4>
    <div class="flex gap-2">
      {['beginner', 'intermediate', 'advanced'].map((level) => {
        const levelLabel = {
          beginner: 'Iniciante',
          intermediate: 'Intermediário',
          advanced: 'Avançado',
        }[level]

        return (
          <a
            href={`/blog/difficulty/${level}`}
            class="px-3 py-1 border-2 border-black text-sm bg-white text-black hover:bg-black hover:text-white transition-colors"
          >
            {levelLabel}
          </a>
        )
      })}
    </div>
  </div>
</div>

<style>
  .heading-font {
    font-family: 'Impact', 'Arial Black', sans-serif;
    text-transform: uppercase;
    letter-spacing: 1px;
  }
</style>
